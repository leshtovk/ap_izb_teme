
--------------- linear regression -----------------

# Train a least squares regression model and calculate RMSE with built-in functions: 
    
    n <- nrow(my_data)
    permuted.columns <- sample(n)
    split <- round(n * 0.8)

    train_data <- my_data[1:split, ]
    test_data <- my_data[(split+1):n, ]
    
    model <- ln(y ~., data = train_data)

    model.pred <- predict(model, newdata = test_data, type = "response")
    # "response" means that we will get numerical results
    # "class" returns labels   
    
    model.err <- test_data[, y] - model_pred
    model.rmse <- sqrt(mean(model.err^2))  

# Train a least squares regression model with the help of repeated cross-referencing:
# The `train` function is part of the `caret` package 
    
    model <- train(
        y ~ .,
        data = my_data,
        method = "lm",
        trControl = trainControl(
            method = "repeatedcv",
            number = 10,
            repeats = 5, 
            verboseIter = TRUE
            ) 
    )

-------------- logistic regression ---------------

# Train a logistic regression model and make a confusion matrix:

    model <- glm(y ~., family = "binomial", data = train_data)
    model.prob <- predict(model, newdata = test_data, type = "response")

    # cut the probabilities by a threshold -- phi, say 0.5
    pred.class <- ifelse(model.prob > phi, class1, class2)
    # make a 2-way frequency table
    table(pred.class, test[, y])

    # make a confusion matrix with the help of `caret`
    pred.class <- factor(pred.class, levels = levels(test[, y]))
    confusionMatrix(pred.class, test[, y])
    
    # get a plot and the area under the ROC curve with `caTools`
    model.auc <- colAUC(model.prob, test[, y], plotROC = TRUE)

# Train a logistic regression model with cross-validation
# use the AUC as the basis for evaluating the model, not accuracy 
    
    model <- train(
    y ~., 
    data = my_data,
    method = "glm"
    trControl <- trainControl(
          method = "cv",
          number = 10,
          summaryFunction = twoClassSummary,
          classProbs = TRUE,
          verboseIter = TRUE
        )
    )
