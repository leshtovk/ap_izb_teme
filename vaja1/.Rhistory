getwd()
library(ggplot2)
fix(diamonds)
?diamonds
rm(list = objects())
fix(Sonar)
fix(Sonar)
data(Sonar)
?glm
?predict
?Sonar
library(mlbench)
install.packages("mlbench")
data(Sonar)
data("Sonar")
library(mlbench)
data(Sonar)
attach(Sonar)
n <- nrow(Sonar)
per.rows <- sample(n)
split <- round(n * 0.6)
Sonar <- Sonar[per.rows, ]
set.train <- Sonar[1:split, ]
set.test <- Sonar[(split + 1):n, ]
model <- glm(Class ~., family = "binomial", data = set.train)
model.prob <- predict(model, newdata = set.test, type = "response")
install.packages("caTools")
pred.class <- ifelse(model.prob > 0.8, "M", "R")
pred.class <- factor(pred.class, levels = levels(set.test[, "Class"]))
library(caret)
install.packages("caret")
confusionMatrix(pred.class, set.test[, "Class"])
library(caret)
library(caret)
confusionMatrix(pred.class, set.test[, "Class"])
install.packages("e1071")
confusionMatrix(pred.class, set.test[, "Class"])
install.packages("caret")
library(caret)
install.packages("caTools")
library(caTools)
confusionMatrix(pred.class, set.test[, "Class"])
library(e1071)
install.packages("e1071")
confusionMatrix(pred.class, set.test[, "Class"])
colAUC(model.prob. set.test[, "Class"], plotROC = TRUE)
colAUC(model.prob, set.test[, "Class"], plotROC = TRUE)
model2 <- glm(Class ~., data = set.train)
model2 <- glm(Class ~., family = "binomial", data = set.train)
mode2.prob <- predict(model2, newdata = set.test, type = "response")
model2.prob <- predict(model2, newdata = set.test, type = "response")
rm(mode2.prob)
pred2.class <- ifelse(p > 0.0, "M", "R")
pred2.class <- ifelse(model.pred > 0.0, "M", "R")
pred2.class <- ifelse(model.prob > 0.0, "M", "R")
pred2.class <- factor(pred2.class, levels = leves(set.train[, "Class"]))
pred2.class <- factor(pred2.class, levels = levess(set.train[, "Class"]))
pred2.class <- factor(pred2.class, levels = levels(set.train[, "Class"]))
confusionMatrix(pred2.class, set.test[, "Class"])
model.auc <- colAUC(pred.class, set.test[, "Class"], plotROC = FALSE)
model.auc <- colAUC(model.prob, set.test[, "Class"], plotROC = FALSE)
model.auc
rm(list = objects())
getwd()
# x_(n+1) = rx_n(1-x_n)
# x in [0, 1]
# r in [0, 4]
x <- rep(0, times = 300)
f <- function (x, x0, r) {
x[1] = x0
for (i in 2:length(x)) {
x[i] = r * x[i-1] * (1 - x[i-1])
}
}
f(x, 0, 1)
x
f(x, 1, 1)
x
f(x, 0.1, 1)
x
x
f(x, 0.1, 1)
x
f(x, 0.5, 2)
x
f <- function (x, x0, r) {
x[1] = x0
for (i in 2:length(x)) {
x[i] = r * x[i-1] * (1 - x[i-1])
}
}
f <- function (x, x0, r) {
x[1] = x0
for (i in 2:length(x)) {
x[i] = r * x[i-1] * (1 - x[i-1])
}
return(x)
}
f(x, 0.5, 2)
f(x, 0.1, 2)
f(x, 0.2, 1)
x1 <- f(x, 0.2, 1)
x
x1
y1 <- x1
x1 <- 1:length(y1)
plot(x1, y1)
pdf("veritasium.pdf")
par(mfrow = c(1:10))
par(mfrow = c(1, 10))
r.range <- seq(from = 0, to = 4)
rm(x1, y1)
rm(x)
x.range <- rep(0, times = 300)
r.range <- seq(from = 0, to = 4, length = 10)
x <- rep(0, times = 300)
x.range <- seq(from = 0, to = 1, length = 10)
F <- function(x, x.range, r.range, f) {
for (i in 1:10){
for (j in 1:10){
plot(1:300, f(x, x.range[i]), r.range[j])
}
}
dev.off()
}
F(x, x.range, r.range, f)
F <- function(x, x.range, r.range, f) {
for (i in 1:10){
for (j in 1:10){
plot(1:300, f(x, x.range[i], r.range[j])
}
}
dev.off()
}
F <- function(x, x.range, r.range, f) {
for (i in 1:10){
for (j in 1:10){
plot(1:300, f(x, x.range[i], r.range[j]))
}
}
dev.off()
}
F(x, x.range, r.range, f)
dev.off()
F(x, x.range, r.range, f)
F <- function(x, x.range, r.range, f) {
pdf("veritasium.pdf")
for (i in 1:10){
for (j in 1:10){
plot(1:300, f(x, x.range[i], r.range[j]))
}
}
dev.off()
}
F(x, x.range, r.range, f)
"1" + "1"
c("1", "1")
paste("X = ", 1, sep = "")
F <- function(x, x.range, r.range, f) {
pdf("veritasium.pdf")
for (i in 1:10){
for (j in 1:10){
title <- paste("x0 = ", x.range[i], ", ", "r = ", r.range[j])
plot(1:300, f(x, x.range[i], r.range[j]), main = title)
}
}
dev.off()
}
F(x, x.range, r.range, f)
seq(from = 0, to = 4, length = 40)
seq(from = 0, to = 4, length = 41)
r.range = seq(from = 0, to = 4, lenght = 41)
r.range = seq(from = 0, to = 4, length.out =  = 41)
r.range <- seq(from = 0, to = 4, length = 41)
seq(from = 0, to = 1, length = 11)
x.range <- seq(from = 0, to = 1, length = 11)
F <- function(x, x.range, r.range, f) {
pdf("veritasium.pdf")
for (i in 1:length(x.range)){
for (j in 1:length(r.range)){
title <- paste("x0 = ", x.range[i], ", ", "r = ", r.range[j])
plot(1:300, f(x, x.range[i], r.range[j]), main = title)
}
}
dev.off()
}
F(x, x.range, r.range, f)
# x = 0.1
# r in [0, 4]
file.edit("veritasium.r")
seq(from = 0, to = 4, length = 401)
seq(from = 0.1, to = 0.9, lenght = 9)
seq(from = 0.1, to = 0.9, length = 9)
source("veritasium.r")
F(x, x0, r.range, f)
seq(from = 3, to = 4, length = 1001)
seq(from = 3, to = 4, length = 501)
source("veritasium.r")
F(x, x0, r.range2, f, "ver_3-4.pdf")
source("veritasium.r")
F(x2, x0, r.range2, f, "ver_3-4.pdf")
source("veritasium.r")
F(x2, x0, r.range2, f, "ver_3-4.pdf")
source("veritasium.r")
F(x2, x0, r.range2, f, "ver_3-4.pdf")
source("veritasium.r")
F(x2, x0, r.range2, f, "ver_3-4.pdf")
# 3.738 - 3.74
source("veritasium.r")
source("veritasium.r")
F(x2, x0, r.range3, f, "ver_3.738-3.74.pdf")
source("veritasium.r")
F(x2, x0, r.range3, f, "ver_3.738-3.74.pdf")
rm(list = objects())
setwd("~/repos/itap/veritasium")
file.edit("veritasium.r")
source("veritasium.r")
F(x, x0, r.range2, "ver_3-4.pdf")
F(x, x0, r.range2, f, "ver_3-4.pdf")
F(x2, x0, r.range2, f, "ver_3-4.pdf")
setwd("~/repos/itap")
rm(list = objects())
library(caret)
?preProcess
?nearZeroVar
setwd("~/repos/itap/vaja1")
# import `iris` dataset
data(iris)
# create a training and test set
library(caret)
iris.part <- createDataPartition(iris$Species, list = FALSE)
iris.part <- createDataPartition(iris$Species, p = 4/5, list = FALSE)
iris.dim = dim(iris)
iris.train <- iris[iris.part, ]
iris.test <- iris[-iris.part, ]
# train a KNN model
iris.knn <- train(iris$Species ~.,
data = iris.train,
method = "knn")
iris.knn <- train(Species ~.,
data = iris.train,
method = "knn")
iris.knn
# test for more values of `k`
iris.knn2 <- train(Species ~., data = iris.train,
method = "knn", tuneGrid = data.frame(k = 1:30))
iris.knn2
# plot how `kappa` changes as `k` changes
plot(iris.knn2$results$k, iris.knn2$results$Kappa, type = "o", col = "blue",
xlab = "k", ylab = "kappa")
# print the results of the model
plot(iris.knn2)
pdf("k_vs_acc.pdf")
plot(iris.knn2, main = "data: Iris, model: KNN")
plot(iris.knn2, title = "data: Iris, model: KNN")
dev.off()
pdf("k_vs_acc.pdf")
plot(iris.knn2$results$k, iris.knn2$results$Accuracy, type = "o", col = "blue",
xlab = "k", ylab = "kappa", main = "data: Iris, model: KNN")
dev.off()
# compare the predictions of the classifier to the actual data
iris.knn2.predictions <- predict(iris.knn2, newdata = iris.test)
iris.knn2.predictions
iris.test[, iris.dim[2]]
iris.knn2.correct <- sum(iris.knn2.predictions == iris.test[, iris.dim[2]])
iris.knn2.correct
iris.knn2.correctness <- iris.knn2.correct / dim(iris.test)[1]
iris.knn2.correctness
# write this out in a file
file.edit("vaja1_1.r")
?predict
rm(list = objects())
source("vaja1_1.R")
getwd()
source("vaja1_1.r")
source("vaja1_1.r")
plot(iris.knn)
dev.off()
plot(iris.knn)
iris.knn
plot(iris.knn, ylim = c(0, 1))
pair(mfrow = c(1, 2))
par(mfrow = c(1, 2))
plot(iris.knn, ylim = c(0.5, 1))
?par
dev.off()
pdf("nbs_vs_acc.pdf")
plot(iris.knn)
plot(iris.knn, ylim = c(0, 1))
dev.off()
plot(iris.knn, ylim = c(0, 1), main = "AAA")
dev.off()
pdf("nbs_vs_acc.pdf")
plot(iris.knn, main = "data: Iris, model: KNN")
plot(iris.knn, ylim = c(0, 1), main = "data: Iris, model: KNN")
dev.off()
iris.knn
source('~/repos/itap/vaja1/vaja1_1.r')
source('~/repos/itap/vaja1/vaja1_1.r')
iris.knn
plot(iris.knn)
pdf("nbs_vs_acc.pdf")
plot(iris.knn, main = "data: Iris, model: KNN")
plot(iris.knn, ylim = c(0, 1), main = "data: Iris, model: KNN")
dev.off()
pdf("nbs_vs_acc.pdf")
plot(iris.knn, main = "data: Iris, model: KNN")
plot(iris.knn, ylim = c(0, 1), main = "data: Iris, model: KNN")
dev.off()
iris.knn.measure
iris.knn.correct
d
source('~/repos/itap/vaja1/vaja1_1.r')
par(mfrow = c(1, 1))
plot(iris.knn)
iris.knn.measure
source('~/repos/itap/vaja1/vaja1_1.r')
source('~/repos/itap/vaja1/vaja1_1.r')
source('~/repos/itap/vaja1/vaja1_1.r')
source('~/repos/itap/vaja1/vaja1_1.r')
source("vaja1_1.r")
iris.knn
plot(iris.knn)
rm(list = objects())
# part 2
podatki = read.csv("podatki.csv", fileEncoding = "UTF-8")
View(podatki)
head(podatki)
str(podatki)
sum(is.na(podatki))
sum(is.nan(podatki))
podatki$X4 = gsub('“|”', '', as.character(podatki$X4))
podatki$X6 = gsub('“|”', '', as.character(podatki$X6))
str(podatki)
podatki[podatki$X4 == "YES"] = "DA"
podatki[podatki$X4 == "YES"] <- "DA"
podatki$X4[podatki$X4 == "YES"] <- "DA"
podatki$X4[podatki$X4 == "NO"] <- "NE"
str(podatki)
rm(list = object())
file.edit("vaja1_2.r")
source("vaja1_2.r")
View(podatki)
source("vaja1_2.r")
str(podatki)
sum(is.na(podatki))
podatki$X6
View(podatki)
source("vaja1_2.r")
source("vaja1_2.r")
str(podatki)
source("vaja1_2.r")
str(podatki)
source("vaja1_2.r")
source("vaja1_2.r")
str(podatki)
source("vaja1_2.r")
str("vaja1_2.r")
str(podatki)
View(podatki)
source("vaja1_2.r")
401/99
99/401
500*0.8
source("vaja1_2.r")
source("vaja1_2.r")
plot(podatki.knn, ylim = c(0, 1))
plot(podatki.knn, ylim = c(0, 1))
source("vaja1_2.r")
plot(podatki.knn, ylim = c(0, 1))
podatki.knn
source("vaja1_2.r")
plot(podatki.knn, ylim = c(0, 1))
podatki.knn
source("vaja1_2.r")
source("vaja1_2.r")
source("vaja1_2.r")
source("vaja1_2.r")
rm(list = objects())
q()
