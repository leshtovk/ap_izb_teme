load(".RData")
getwd()
setwd("~/repos/ap_izb_teme/vaje_islr/applied1")
ls
load(".RData")
View(college)
summary()
summary(college)
str(college)
pairs(college[, 2:10])
plot(college$Apps, college$Accept)
max(college$Apps)
apps.max <- max(college$Apps)
View(college)
rownames(college)[college$Apps == apps.max]
chump <- rownames(college)[college$Apps == apps.max]
college[chump, ]
chump <- college[chump, ]
str(college)
college.dim <- dim(college)
college.dim[2]
?rep
means <- rep(0, times = 17)
college.nums <- college[, -1]
mean(college.nums)
for i in 2:18 {
mean[i-1] = mean(college[, i])
}
for i = 2:18 {
mean[i-1] = mean(college[, i])
}
for (i = 2:18) {
mean[i-1] = mean(college[, i])
}
for (i in 2:18) {
mean[i-1] = mean(college[, i])
}
for (i in 2:18) {
means[i-1] = mean(college[, i])
}
means
summary(college)
sum(chump[2:college.dim[2]] >= means)
means
chimp[2:college.dim[2]]
chump[2:college.dim[2]]
barplot(chump[2:college.dim[2]])
Elite <- rep("No", nrow(college))
Elite[college$Top10perc > 50] <- "Yes"
Elite <- as.factor(Elite)
college <- data.frame(college, Elite)
View(college)
plot(college$Outstate, college$Elite)
plot(college$Elite, college$Outstate)
getwd()
setwd("~/repos/itap/vaje_islr/linear_regression")
getwd()
# include libraries
library(MASS)
library(ISLR)
install.packages("ISLR")
library(ISLR)
?Boston
rm(list=objects())
fix(Boston)
# using `fix` automatically adds `Boston` in the global environment
View(Boston)
str(Boston)
sum(is.na(Boston))
summary(Boston)
# draw some plots
boxplot(crim ~ medv, data = Boston, xlab = "median value"
ylab = "crime rate")
boxplot(crim ~ medv, data = Boston, xlab = "median value",
ylab = "crime rate")
# wrong type of graph
# i'll go with a scatterplot next
scatterplot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value")
plot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value")
plot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value", xlim = c(0, 100))
# get a more accurate view of the the median values where the crime rates are low
plot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value", xlim = c(0, 30))
plot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value")
plot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value", xlim = c(0, 30))
plot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value", xlim = c(0, 20))
plot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value", xlim = c(0, 100))
plot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value", xlim = c(0, 10))
plot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value", xlim = c(0, 5))
plot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value", xlim = c(0, 1))
plot(Boston$crim, Boston$medv, xlab = "crime rate", ylab = "median value", xlim = c(0, 40))
plot(Boston$lstat, Boston$medv, xlab = "crime rate", ylab = "median value", xlim = c(0, 40))
# fit a simple linear regression model
lm.fit = lm(Boston$medv ~ Boston$lstat)
str(lm.fit)
summary(lm.fit)
attach(Boston)
lm.fit = lm(Boston$medv ~ Boston$lstat)
summary(lm.fit)
lm.fit = lm(medv ~ lstat)
summary(lm.fit)
names(lm.fit)
confit(lm.fit)
confint(lm.fit)
?confint
confint(lm.fit, level = 0.95)
confint(lm.fit, parm = 10, level = 0.95)
confint(lm.fit, level = 0.95)
predict(lm.fit, data.frame(lstat = c(5, 10, 15)), interval = "confidence")
predict(lm.fit, data.frame(lstat = c(0, 5, 10, 15)), interval = "confidence")
coef(lm.fit)
str(coef(lm.fit))
x0 <- -coef(lm.fit)[1]/coef(lm.fit)][2]
coef(lm.fit)[1]
lm.coefs <- coef(lm.fit)
inter <- lm.coefs[1]
lstat.coef <- lm.coefs[2]
x0 <- -inter/lstat.coef
x0
predict(lm.fit, data.frame(lstat = c(0, x0, 5, 10, 15)), interval = "confidence")
?predict
predict(lm.fit, data.frame(lstat = c(0, x0, 5, 10, 15)), interval = "confidence", level = 0.59)
predict(lm.fit, data.frame(lstat = c(0, x0, 5, 10, 15)), interval = "confidence", level = 0.95)
predict(lm.fit, data.frame(lstat = c(0, x0, 5, 10, 15)), interval = "confidence", level = 0.97)
predict(lm.fit, data.frame(lstat = c(0, x0, 5, 10, 15)), interval = "confidence", level = 0.95)
confit(lm.fit)
confint(lm.fit)
coef(lm.fit)
predict(lm.fit, data.frame(lstat = c(5, 10, 15)),
interval = "confidence", level = 0.95)
predict(lm.fit, data.frame(lstat = c(5, 10, 15)),
interval = "prediction", level = 0.95)
# plot the results of the regression
plot(lstat, medv, xlab = "low status", ylab = "median value")
?abline
plot(lstat, medv, xlab = "low status", ylab = "median value")
abline(lm.fit)
abline(lm.fit, color = "red")
abline(lm.fit, lwd = 3, col = "red")
plot(lstat, medv, xlab = "low status", ylab = "median value", main = "results of the regression")
abline(lm.fit, lwd = 3, col = "red")
pdf("meanv_over_lstat.pdf")
plot(lstat, medv, xlab = "low status", ylab = "median value", main = "results of the regression")
abline(lm.fit, lwd = 3, col = "red")
dev.off()
pdf("meanv_over_lstat.pdf")
plot(lstat, medv, xlab = "low status", ylab = "median value", main = "results of the regression")
pdf("meanv_over_lstat.pdf")
plot(lstat, medv,
xlim = c(0, 50), ylim = c(0, 50),
xlab = "ltat", ylab = "medv",
main = "Regressing `meanv` over `lstat`")
abline(lm.fit, lwd = 3, col = "red")
dev.off()
pdf("meanv_over_lstat.pdf")
plot(lstat, medv,
xlim = c(0, 50), ylim = c(0, 50),
xlab = "lstat", ylab = "medv",
main = "Regressing `medv` over `lstat`")
abline(lm.fit, lwd = 3, col = "red")
dev.off()
plot(lstat, medv,
xlim = c(0, 50), ylim = c(0, 50),
xlab = "lstat", ylab = "medv",
main = "Regressing `medv` over `lstat`")
par(mfrow = c(2, 2))
plot(lm.fit)
file.edit("simple.R")
lm
?lm
rm(list = objects())
View(Boston)
fix(Boston)
source("simple.R")
par(mfrow=c(1, 1))
source("simple.R")
source("simple.R")
source("simple.R")
predict(lm.fit, data.frame(lstat = c(0, 5, 10, 15)), intreval = "confidence",)
predict(lm.fit, data.frame(lstat = c(0, 5, 10, 15)), intreval = "confidence", level = 0.95)
lm.fit
summary(lm.fit)
confint(lm.fit)
predict(lm.fit, data.frame(lstat = c(0, 5, 10, 15)), interval = "confidence")
predict(lm.fit, data.frame(lstat = c(0, 5, 10, 15)), interval = "confidence", level = 0.95)
par(mfrow = c(1, 2))
plot(lstat, medv,
xlim = c(0, 50), ylim = c(0, 50),
xlab = "lstat", ylab = "medv",
main = "Regressing `medv` over `lstat`")
abline(lm.fit, lwd = 3, col = "red")
plot(lm.fit, residuals(lm.fit))
plot(predict(lm.fit), residuals(lm.fit))
?predict
preict(lm.fit)
predict(lm.fit)
predictions <- predict(lm.fit)
residuals <- residuals(lm.fit)
predictions[1]
residuals[1]
plot(predictions[1], residuals[1])
plot(predictions[1], residuals[1])
source("simple.R")
source("simple.R")
source("simple.R")
source("simple.R")
source("simple.R")
source("simple.R")
source("simple.R")
source("simple.R")
rm(list = objects())
dev.off()
